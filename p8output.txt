 gcc -g p8.c                 ✔  2m 34s  
    ~/Doc/Cod/C/pe/Test3Session1  ./a.out                                ✔ 
Enter the number of fractions you want to add: 3
Enter a fraction like: NUM DEN
1 4
Enter a fraction like: NUM DEN
2 4
Enter a fraction like: NUM DEN
3 4
1/4 + 2/4 + 3/4 is 3/2
    ~/Doc/Cod/C/pe/Test3Session1  gdb a.out                       ✔  5s  
GNU gdb (GDB) 11.2
Copyright (C) 2022 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-pc-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<https://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.out...
(gdb) b main
Breakpoint 1 at 0x1437: file p8.c, line 84.
(gdb) r
Starting program: /home/piyush/Documents/Coding/C/peer-mentor/Test3Session1/a.out 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/usr/lib/libthread_db.so.1".

Breakpoint 1, main () at p8.c:84
84      {
(gdb) n
85          int length = input_n();
(gdb) s
input_n () at p8.c:23
23      {
(gdb) n
25          printf("Enter the number of fractions you want to add: ");
(gdb) 
26          scanf("%d", &n);
(gdb) 
Enter the number of fractions you want to add: 3
27          return n;
(gdb) p n
$1 = 3
(gdb) n
28      }
(gdb) 
main () at p8.c:86
86          Fraction arr[length];
(gdb) i lo
length = 3
arr = <error reading variable arr (Cannot access memory at address 0x7ffffffff000)>
sum = {num = -134463488, den = 32767}
(gdb) n
87          input_n_fractions(length, arr);
(gdb) s
input_n_fractions (n=3, arr=0x7fffffffdac0) at p8.c:40
40          for (int i = 0; i < n; i++)
(gdb) n
42              arr[i] = input_fraction();
(gdb) 
Enter a fraction like: NUM DEN
1 4
40          for (int i = 0; i < n; i++)
(gdb) 
42              arr[i] = input_fraction();
(gdb) 
Enter a fraction like: NUM DEN
2 4
40          for (int i = 0; i < n; i++)
(gdb) 
42              arr[i] = input_fraction();
(gdb) 
Enter a fraction like: NUM DEN
3 4
40          for (int i = 0; i < n; i++)
(gdb) n
44      }
(gdb) n
main () at p8.c:88
88          Fraction sum = add_n_fractions(length, arr);
(gdb) i lo
length = 3
arr = {{num = 1, den = 4}, {num = 2, den = 4}, {num = 3, den = 4}}
sum = {num = -134463488, den = 32767}
(gdb) s
add_n_fractions (n=3, arr=0x7fffffffdac0) at p8.c:63
63          sum.num = arr[0].num, sum.den = arr[0].den;
(gdb) n
64          for (int i = 1; i < n; i++)
(gdb) n
66              sum = add_fractions(sum, arr[i]);
(gdb) n
64          for (int i = 1; i < n; i++)
(gdb) 
66              sum = add_fractions(sum, arr[i]);
(gdb) 
64          for (int i = 1; i < n; i++)
(gdb) 
68          int factor = find_gcd(sum.num, sum.den);
(gdb) 
69          sum.num /= factor;
(gdb) 
70          sum.den /= factor;
(gdb) 
71          return sum;
(gdb) p sum
$2 = {num = 3, den = 2}
(gdb) n
72      }
(gdb) n
main () at p8.c:89
89          output(length, arr, sum);
(gdb) i lo
length = 3
arr = {{num = 1, den = 4}, {num = 2, den = 4}, {num = 3, den = 4}}
sum = {num = 3, den = 2}
(gdb) s
output (n=3, f=0x7fffffffdac0, sum=...) at p8.c:76
76          for (int i = 0; i < n - 1; i++)
(gdb) n
78              printf("%d/%d + ", f[i].num, f[i].den);
(gdb) 
76          for (int i = 0; i < n - 1; i++)
(gdb) 
78              printf("%d/%d + ", f[i].num, f[i].den);
(gdb) 
76          for (int i = 0; i < n - 1; i++)
(gdb) 
80          printf("%d/%d is %d/%d\n", f[n - 1].num, f[n - 1].den, sum.num, sum.den);
(gdb) 
1/4 + 2/4 + 3/4 is 3/2
81      }
(gdb) 
main () at p8.c:90
90          return 0;
(gdb) c
Continuing.
[Inferior 1 (process 3571) exited normally]

